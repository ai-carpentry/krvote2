#' 공공데이터포털 마스터 데이터 - 선거코드 가져오기
#'
#' 공공데이터포털 API를 통해 선거코드 마스터 데이터를 가져오는 함수입니다.
#'
#' @param api_key 공공데이터포털 API 인증키
#' @param result_type 결과 형식 (기본값: "json")
#' @param num_of_rows 조회할 데이터 개수 (기본값: 1000)
#'
#' @return 선거코드 데이터프레임
#' @export
#'
#' @examples
#' get_election_code(api_key = Sys.getenv("DATA_APIKEY"))
get_election_code <- function(api_key, result_type = "json", num_of_rows = 1000) {
# API 요청 URL 생성
request_url <- str_glue("http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList",
"?resultType={result_type}",
"&numOfRows={num_of_rows}",
"&serviceKey={api_key}")
# API 요청 보내기
response <- httr::GET(request_url)
# 응답 데이터 파싱
election_code_list <- httr::content(response, as = "text") %>%
jsonlite::fromJSON()
# 데이터 정제
code_election <- election_code_list %>%
purrr::pluck("getCommonSgCodeList") %>%
purrr::pluck("item") %>%
tibble::as_tibble() %>%
janitor::clean_names(ascii = FALSE) %>%
dplyr::select(선거코드 = sg_id, 선거명 = sg_name, 선거구분 = sg_typecode)
return(code_election)
}
#' 공공데이터포털 선거정보 데이터 조회 함수
#'
#' @description 선거코드, 구시군코드, 선거구코드, 정당코드, 직업코드, 학력코드 등의 데이터를 조회하는 함수
#'
#' @param service_url 서비스 URL
#' @param service_key 공공데이터포털에서 발급받은 서비스 키
#' @param page_no 페이지 번호 (기본값: 1)
#' @param num_of_rows 페이지당 출력 데이터 수 (기본값: 10)
#' @param result_type 출력 데이터 포맷 (기본값: "json", 다른 옵션: "xml")
#' @param sg_id 선거ID (getCommonSggCodeList, getCommonPartyCodeList, getCommonJobCodeList, getCommonEduBckgrdCodeList 에 필요)
#' @param sg_typecode 선거종류코드 (getCommonSggCodeList 에 필요)
#' @param sd_name 시도명 (getCommonGusigunCodeList 에서 옵션)
#'
#' @import httr
#' @import jsonlite
#' @import dplyr
#' @import tibble
#'
#' @return 요청한 선거정보 데이터프레임
#' @export
get_election_data <- function(service_url, service_key, page_no = 1, num_of_rows = 10,
result_type = "json", sg_id = NULL, sg_typecode = NULL, sd_name = NULL) {
# 요청 URL 생성
request_url <- paste0(service_url, "?",
"serviceKey=", service_key,
"&pageNo=", page_no,
"&numOfRows=", num_of_rows,
"&resultType=", result_type)
if (!is.null(sg_id)) {
request_url <- paste0(request_url, "&sgId=", sg_id)
}
if (!is.null(sg_typecode)) {
request_url <- paste0(request_url, "&sgTypecode=", sg_typecode)
}
if (!is.null(sd_name)) {
request_url <- paste0(request_url, "&sdName=", sd_name)
}
# API 요청
response <- GET(request_url)
# 응답 데이터 확인
if (http_type(response) != "application/json" && http_type(response) != "application/xml") {
stop("API did not return json or xml", call. = FALSE)
}
if (http_error(response)) {
stop(paste("API request failed:", status_code(response), content(response, "text", encoding = "utf-8")), call. = FALSE)
}
# JSON 또는 XML 파싱
if (result_type == "json") {
result <- content(response, "text", encoding = "UTF-8")
result_df <- fromJSON(result) %>%
.$items %>%
as_tibble()
} else {
result <- content(response, "parsed", encoding = "UTF-8")
result_df <- result %>%
xml_find_all("//items/item") %>%
map(xml_children) %>%
map(xml_text) %>%
map(as.list) %>%
bind_rows() %>%
as_tibble()
}
return(result_df)
}
usethis::edit_r_environ()
service_key <- Sys.getenv("DATA_GO_ENCODE_KEY")
# 정당코드 조회 (2페이지, 페이지당 20개 데이터)
party_code <- get_election_data(service_url = "http://apis.data.go.kr/9760000/CommonCodeService/getCommonPartyCodeList",
service_key = service_key,
sg_id = "20220309",
page_no = 2,
num_of_rows = 20)
library(tidyverse)
library(httr)
service_key <- Sys.getenv("DATA_GO_ENCODE_KEY")
# 정당코드 조회 (2페이지, 페이지당 20개 데이터)
party_code <- get_election_data(service_url = "http://apis.data.go.kr/9760000/CommonCodeService/getCommonPartyCodeList",
service_key = service_key,
sg_id = "20220309",
page_no = 2,
num_of_rows = 20)
library(jsonlite)
service_key <- Sys.getenv("DATA_GO_ENCODE_KEY")
# 정당코드 조회 (2페이지, 페이지당 20개 데이터)
party_code <- get_election_data(service_url = "http://apis.data.go.kr/9760000/CommonCodeService/getCommonPartyCodeList",
service_key = service_key,
sg_id = "20220309",
page_no = 2,
num_of_rows = 20)
print(party_code)
library(tidyverse)
library(httr)
library(jsonlite)
service_key <- Sys.getenv("DATA_GO_ENCODE_KEY")
# 정당코드 조회 (2페이지, 페이지당 20개 데이터)
party_code <- get_election_data(service_url = "http://apis.data.go.kr/9760000/CommonCodeService/getCommonPartyCodeList",
service_key = service_key,
sg_id = "20220309",
page_no = 2,
num_of_rows = 20)
print(party_code)
service_key
# 정당코드 조회 (2페이지, 페이지당 20개 데이터)
party_code <- get_election_data(service_url = "http://apis.data.go.kr/9760000/CommonCodeService/getCommonPartyCodeList",
service_key = service_key,
sg_id = "20220309",
page_no = 1,
num_of_rows = 20)
print(party_code)
# 정당코드 조회 (2페이지, 페이지당 20개 데이터)
party_code <- get_election_data(service_url = "http://apis.data.go.kr/9760000/CommonCodeService/getCommonPartyCodeList",
service_key = service_key,
sg_id = "20220309",
page_no = 1,
num_of_rows = 100)
print(party_code)
### 함수: getCommonSgCodeList
getCommonSgCodeList <- function(serviceKey, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
return(content(response, "text"))
}
### 함수: getCommonGusigunCodeList
getCommonGusigunCodeList <- function(serviceKey, sgId, sdName = NULL, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonGusigunCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
sgId = sgId,
sdName = sdName,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
return(content(response, "text"))
}
### 함수: getCommonSggCodeList
getCommonSggCodeList <- function(serviceKey, sgId, sgTypecode, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSggCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
sgId = sgId,
sgTypecode = sgTypecode,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
return(content(response, "text"))
}
### 함수: getCommonPartyCodeList
getCommonPartyCodeList <- function(serviceKey, sgId, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonPartyCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
sgId = sgId,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
return(content(response, "text"))
}
### 함수: getCommonJobCodeList
getCommonJobCodeList <- function(serviceKey, sgId, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonJobCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
sgId = sgId,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
return(content(response, "text"))
}
### 함수: getCommonEduBckgrdCodeList
getCommonEduBckgrdCodeList <- function(serviceKey, sgId, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonEduBckgrdCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
sgId = sgId,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
return(content(response, "text"))
}
getCommonSgCodeList(service_key)
service_key <- Sys.getenv("DATA_GO_DECODE_KEY")
getCommonSgCodeList(service_key)
# getCommonSgCodeList 함수 정의
getCommonSgCodeList <- function(serviceKey, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
# 응답이 JSON 형식인지 확인
if(http_type(response) == "application/json") {
# JSON 응답을 텍스트로 가져오기
response_text <- content(response, "text")
# JSON 응답을 리스트로 변환
response_list <- fromJSON(response_text, flatten = TRUE)
# items 항목을 데이터 프레임으로 변환
if("body.items" %in% names(response_list)) {
df <- as.data.frame(response_list$body$items)
} else {
df <- data.frame()
}
return(df)
} else {
stop("API 응답이 JSON 형식이 아닙니다.")
}
}
result_df <- getCommonSgCodeList(serviceKey)
# 예시 함수 호출
# serviceKey <- "your_service_key_here"
result_df <- getCommonSgCodeList(service_key)
print(result_df)
# getCommonSgCodeList 함수 정의
getCommonSgCodeList <- function(serviceKey, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
# 응답이 JSON 형식인지 확인
if(http_type(response) == "application/json") {
# JSON 응답을 텍스트로 가져오기
response_text <- content(response, "text")
# JSON 응답을 리스트로 변환
response_list <- fromJSON(response_text, flatten = TRUE)
# 응답 구조 확인을 위한 로그 출력
print(names(response_list))
print(names(response_list$body))
print(response_list$body$items)
# items 항목을 데이터 프레임으로 변환
if("items" %in% names(response_list$body)) {
df <- as.data.frame(response_list$body$items)
} else {
df <- data.frame()
}
return(df)
} else {
stop("API 응답이 JSON 형식이 아닙니다.")
}
}
# 예시 함수 호출
# serviceKey <- "your_service_key_here"
result_df <- getCommonSgCodeList(service_key)
print(result_df)
getCommonSgCodeList <- function(serviceKey, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
return(content(response, "text"))
}
# 예시 함수 호출
# serviceKey <- "your_service_key_here"
result_df <- getCommonSgCodeList(service_key)
result_df
OpenAPI활용가이드(코드정보)_v3.9.pdf
OpenAPI활용가이드(코드정보)_v3.9.pdf
# getCommonSgCodeList 함수 정의
getCommonSgCodeList <- function(serviceKey, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
# 응답이 JSON 형식인지 확인
if(http_type(response) == "application/json") {
# JSON 응답을 텍스트로 가져오기
response_text <- content(response, "text")
# JSON 응답을 리스트로 변환
response_list <- fromJSON(response_text, flatten = TRUE)
# items 항목을 데이터 프레임으로 변환
if("response.body.items.item" %in% names(response_list)) {
df <- as.data.frame(response_list$response$body$items$item)
} else {
df <- data.frame()
}
return(df)
} else {
stop("API 응답이 JSON 형식이 아닙니다.")
}
}
getCommonSgCodeList(service_key)
# getCommonSgCodeList 함수 정의
getCommonSgCodeList <- function(serviceKey, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
# 응답이 JSON 형식인지 확인
content_type <- http_type(response)
print(paste("Content-Type:", content_type))
# 응답이 JSON 형식인지 확인 후 처리
if(content_type == "application/json" || content_type == "application/json;charset=UTF-8") {
# JSON 응답을 텍스트로 가져오기
response_text <- content(response, "text")
# JSON 응답을 리스트로 변환
response_list <- fromJSON(response_text, flatten = TRUE)
# items 항목을 데이터 프레임으로 변환
if("response.body.items.item" %in% names(response_list)) {
df <- as.data.frame(response_list$response$body$items$item)
} else {
df <- data.frame()
}
return(df)
} else {
# 응답 내용을 텍스트로 출력하여 문제를 파악
response_text <- content(response, "text")
print("API 응답이 JSON 형식이 아닙니다.")
print(response_text)
stop("API 응답이 JSON 형식이 아닙니다.")
}
}
getCommonSgCodeList(service_key)
### 함수: getCommonSgCodeList
getCommonSgCodeList <- function(serviceKey, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
return(content(response, "text"))
}
getCommonSgCodeList(service_key)
getCommonSgCodeList <- function(serviceKey, pageNo = 1, numOfRows = 10) {
url <- "http://apis.data.go.kr/9760000/CommonCodeService/getCommonSgCodeList"
response <- GET(url, query = list(
serviceKey = serviceKey,
pageNo = pageNo,
numOfRows = numOfRows,
resultType = "json"
))
if (response$status_code == 200) {
json_data <- content(response, "text", encoding = "UTF-8")
result_list <- fromJSON(json_data)
if (result_list$response$header$resultCode == "INFO-00") {
result_df <- as.data.frame(result_list$response$body$items$item)
return(result_df)
} else {
warning("API request failed with message: ", result_list$response$header$resultMsg)
return(data.frame())
}
} else {
warning("API request failed with status code: ", response$status_code)
return(data.frame())
}
}
result_df <- getCommonSgCodeList(service_key)
print(result_df)
devtools::document()
devtools::load_all(".")
rm(list = c("getCommonEduBckgrdCodeList",
"getCommonGusigunCodeList", "getCommonJobCodeList",
"getCommonPartyCodeList", "getCommonSgCodeList",
"getCommonSggCodeList"))
devtools::load_all(".")
devtools::install()
result <- getCommonSgCodeList(serviceKey = Sys.getenv("DATA_GO_DECODE_KEY"))
library(krvote2)
result <- getCommonSgCodeList(serviceKey = Sys.getenv("DATA_GO_DECODE_KEY"))
result
usethis::use_vignette(name = "master_code.Rmd", title = "krvote2 ")
usethis::use_vignette(name = "masterCode.Rmd", title = "krvote2 ")
usethis::use_vignette(name = "masterCode", title = "krvote2 ")
usethis::use_vignette(name = "master_code", title = "krvote2 ")
library(krvote2)
data_api_key <- Sys.getenv("DATA_GO_DECODE_KEY")
(serviceKey = data_api_key)
```
library(krvote2)
library(krvote2)
data_api_key <- Sys.getenv("DATA_GO_DECODE_KEY")
getCommonSgCodeList(serviceKey = data_api_key)
